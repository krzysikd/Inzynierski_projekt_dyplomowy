siecARACNE <- aracne(dane2)
graphviz.plot(siecARACNE)
# Zdefiniowanie lukow w grafie czesciowo skierowanym
siecARACNE <- set.arc(siecARACNE,"A","C")
siecARACNE <- set.arc(siecARACNE,"B","C")
siecARACNE <- set.arc(siecARACNE,"D","C")
siecARACNE <- set.arc(siecARACNE,"E","C")
graphviz.plot(siecARACNE)
score(siecARACNE,data=dane2,type="bic")
# Definiowanie poziomow wezlow
A.lv <- c("true", "false")
B.lv <- c("true", "false")
C.lv <- c("true", "false")
D.lv <- c("true", "false")
E.lv <- c("true", "false")
# Obliczenie rozkladow prawdopodobienstwa dla kazdej zmiennej
A.praw <- prop.table(table(dane2$A))
B.praw <- prop.table(table(dane2$B))
C.praw <- prop.table(table(dane2$C))
D.praw <- prop.table(table(dane2$D))
E.praw <- prop.table(table(dane2$E))
# Wprowadzenie rozkladow prawdopodobienstwa
A.prob <- array(A.praw, dim = 2, dimnames = list(A=A.lv))
B.prob <- array(B.praw, dim = c(2,2,2), dimnames = list(B=B.lv, C=C.lv, E=E.lv))
C.prob <- array(C.praw, dim = c(2,2), dimnames = list(C=C.lv, A=A.lv))
D.prob <- array(D.praw, dim = c(2,2), dimnames = list(D=D.lv, C=C.lv))
E.prob <- array(E.praw, dim = c(2,2,2), dimnames = list(E=E.lv, A=A.lv, C=C.lv))
cpt <- list(A=A.prob,B=B.prob,C=C.prob,D=D.prob,E=E.prob)
(bn <- custom.fit(siecTABU,cpt) )
# Definiowanie poziomow wezlow
A.lv <- c("true", "false")
B.lv <- c("true", "false")
C.lv <- c("true", "false")
D.lv <- c("true", "false")
E.lv <- c("true", "false")
# Obliczenie rozkladow prawdopodobienstwa dla kazdej zmiennej
A.praw <- prop.table(table(dane2$A))
B.praw <- prop.table(table(dane2$B))
C.praw <- prop.table(table(dane2$C))
D.praw <- prop.table(table(dane2$D))
E.praw <- prop.table(table(dane2$E))
# Wprowadzenie rozkladow prawdopodobienstwa
A.prob <- array(A.praw, dim = 2, dimnames = list(A=A.lv))
B.prob <- array(B.praw, dim = c(2,2,2), dimnames = list(B=B.lv, C=C.lv, E=E.lv))
C.prob <- array(C.praw, dim = c(2,2), dimnames = list(C=C.lv, A=A.lv))
D.prob <- array(D.praw, dim = c(2,2), dimnames = list(D=D.lv, C=C.lv))
E.prob <- array(E.praw, dim = c(2,2,2), dimnames = list(E=E.lv, A=A.lv, C=C.lv))
cpt <- list(A=A.prob,B=B.prob,C=C.prob,D=D.prob,E=E.prob)
(bn <- custom.fit(siecHC,cpt) )
modelstring(siecHC)
# Definiowanie poziomow wezlow
A.lv <- c("true", "false")
B.lv <- c("true", "false")
C.lv <- c("true", "false")
D.lv <- c("true", "false")
E.lv <- c("true", "false")
# Obliczenie rozkladow prawdopodobienstwa dla kazdej zmiennej
A.praw <- prop.table(table(dane2$A))
B.praw <- prop.table(table(dane2$B))
C.praw <- prop.table(table(dane2$C))
D.praw <- prop.table(table(dane2$D))
E.praw <- prop.table(table(dane2$E))
# Wprowadzenie rozkladow prawdopodobienstwa
A.prob <- array(A.praw, dim = 2, dimnames = list(A=A.lv))
B.prob <- array(B.praw, dim = c(2,2,2), dimnames = list(B=B.lv, C=C.lv, E=E.lv))
C.prob <- array(C.praw, dim = c(2,2), dimnames = list(C=C.lv, A=A.lv))
D.prob <- array(D.praw, dim = c(2,2), dimnames = list(D=D.lv, C=C.lv))
E.prob <- array(E.praw, dim = c(2,2,2), dimnames = list(E=E.lv, A=A.lv, C=C.lv))
cpt <- list(A=A.prob,B=B.prob,C=C.prob,D=D.prob,E=E.prob)
(bn <- custom.fit(siecHC,cpt) )
modelstring(siecHC)
# Wprowadzenie rozkladow prawdopodobienstwa
A.prob <- array(A.praw, dim = 2, dimnames = list(A=A.lv))
B.prob <- array(B.praw, dim = c(2,2,2), dimnames = list(B=B.lv, C=C.lv, E=E.lv))
C.prob <- array(C.praw, dim = c(2,2), dimnames = list(C=C.lv, A=A.lv))
D.prob <- array(D.praw, dim = c(2,2), dimnames = list(D=D.lv, C=C.lv))
E.prob <- array(E.praw, dim = c(2,2,2), dimnames = list(E=E.lv, A=A.lv, C=C.lv))
cpt <- list(A=A.prob,B=B.prob,C=C.prob,D=D.prob,E=E.prob)
(bn <- custom.fit(siecHC,cpt) )
modelstring(siecHC)
# Narysowanie sieci
plot(siecHC)
# Zilustrowany rozkladu prawdopodobienstwa dla wybranego wezla B
bn.fit.barchart(bn$B,main="B")
# Narysowanie sieci
plot(siecHC)
# Narysowanie sieci
plot(siecHC)
# Narysowanie sieci
plot(siecHC)
# Kolejne zilustrowanie sieci
graphviz.plot(siecHC,layout="dot", shape = "rectangle",
highlight = list(nodes = "B",
col = "tomato", fill = "orange"))
graphviz.chart(bn, type = "barprob", grid = TRUE,
bar.col = "darkgreen", strip.bg = "lightskyblue")
# Kolejne zilustrowanie sieci
graphviz.plot(siecHC,layout="dot", shape = "rectangle",
highlight = list(nodes = "B",
col = "tomato", fill = "orange"))
# Kolejne zilustrowanie sieci
graphviz.plot(siecHC,layout="dot", shape = "rectangle",
highlight = list(nodes = "B",
col = "tomato", fill = "orange"))
graphviz.chart(bn, type = "barprob", grid = TRUE,
bar.col = "darkgreen", strip.bg = "lightskyblue")
# Sprawdzenie "sily" lukow
arc.strength(siecHC, data = dane2)
# Testy na sprawdzenie hipotezy o zaleznosci zmiennych
ci.test("D","E",test="x2",data=dane2)
# Testy na sprawdzenie hipotezy o zaleznosci zmiennych
ci.test("D","E",test="x2",data=dane2)
#  nie ma wystarczajÄ…cych dowodĂłw, aby odrzuciÄ‡ hipotezÄ™ zerowÄ… o braku zaleznosci miÄ™dzy zmiennymi
ci.test("D","B", "E",test="x2",data=dane2)
dsep(siecHC, x = "D", y = "B", z = "E")
# Estymacja parametrow
siec_bayes <- bn.fit(siecHC,dane2)
bn.fit.barchart(siec_bayes$A)
junction <- compile(as.grain(bn))
# Estymacja parametrow
siec_bayes <- bn.fit(siecHC,dane2)
bn.fit.barchart(siec_bayes$A)
junction <- compile(as.grain(bn))
# Sprawdzenie prawdopodobienstw
# Dla kazdej zmiennej
querygrain(junction, nodes = c("A", "B", "C", "D", "E"), type = "joint")
# PrawdopodobieĹ„stwo, ĹĽe losowy pacjent bÄ™dzie miaĹ‚ lÄ™ki.
# GIT
{
# A
#Suma
A.prob
siec_bayes$A
}
# A
#Suma
A.prob
siec_bayes$A
# Sprawdzenie prawdopodobienstw
# Dla kazdej zmiennej
querygrain(junction, nodes = c("A", "B", "C", "D", "E"), type = "joint")
# Sprawdzenie prawdopodobienstw
# Dla kazdej zmiennej
querygrain(junction, nodes = c("A", "B", "C", "D", "E"), type = "joint")
# A
#Suma
A.prob
siec_bayes$A
# Sprawdzenie prawdopodobienstw
# Dla kazdej zmiennej
querygrain(junction, nodes = c("A", "B", "C", "D", "E"), type = "joint")
# A
#Suma
A.prob
siec_bayes$A
# Zilustrowany rozkladu prawdopodobienstwa dla wybranego wezla B
bn.fit.barchart(bn$B,main="B")
# Zilustrowany rozkladu prawdopodobienstwa dla wybranego wezla B
bn.fit.barchart(bn$B,main="A")
# Zilustrowany rozkladu prawdopodobienstwa dla wybranego wezla B
bn.fit.barchart(bn$B,main="B")
# Zilustrowany rozkladu prawdopodobienstwa dla wybranego wezla E
bn.fit.barchart(bn$E,main="E")
# PrawdopodobieĹ„stwo, ĹĽe pacjent z lÄ™kiem zostanie zdiagnozowany z rakiem pĹ‚uc.
# C D
warunek <- setEvidence(junction,nodes=c("D"),states=c("true"))
querygrain(warunek, nodes = c("E"))$E
siec_bayes$E
siec_bayes
# PrawdopodobieĹ„stwo, ĹĽe pacjent z lÄ™kiem zostanie zdiagnozowany z rakiem pĹ‚uc.
# C D
warunek <- setEvidence(junction,nodes=c("D"),states=c("true"))
querygrain(warunek, nodes = c("E"))$E
#Suma
sum(dane2$C == 2 & dane2$D == 2 & dane2$E =="YES")/sum(dane2$D == 2 & dane2$C == 2)
siec_bayes$E
# PrawdopodobieĹ„stwo, ĹĽe pacjent z lÄ™kami i chorobÄ… przewlekĹ‚Ä… bÄ™dzie kaszlaĹ‚.
# GIT
{
# D C E
#Warunek
warunek <- setEvidence(junction,nodes=c("D","C"),states=c("true","true"))
querygrain(warunek, nodes = c("E"))$E
#Suma
sum(dane2$C == 2 & dane2$D == 2 & dane2$E =="YES")/sum(dane2$D == 2 & dane2$C == 2)
siec_bayes$E
}
#Suma
sum(dane2$C == 2 & dane2$D == 2 & dane2$E =="YES")/sum(dane2$D == 2 & dane2$C == 2)
siec_bayes$E
# D C E
#Warunek
warunek <- setEvidence(junction,nodes=c("D","C"),states=c("true","true"))
querygrain(warunek, nodes = c("E"))$E
#Suma
sum(dane2$C == 2 & dane2$D == 2 & dane2$E =="YES")/sum(dane2$D == 2 & dane2$C == 2)
siec_bayes$E
#Suma
sum(dane2$C == 2 & dane2$A == 2 & dane2$E =="YES")/sum(dane2$A == 2 & dane2$C == 2)
siec_bayes$E
# PrawdopodobieĹ„stwo, ĹĽe pacjent ma chorobÄ™ przewlekĹ‚Ä…, jeĹĽeli kaszle i ma raka pĹ‚uc
#GIT
{
# E C F
#Warunek
warunek <- setEvidence(junction,nodes=c("E","C"),states=c("true","true"))
querygrain(warunek, nodes = c("F"))$F
#Suma
sum(dane2$C == 2 & dane2$E == "YES" & dane2$F ==2)/sum(dane2$E == "YES" & dane2$C == 2)
siec_bayes$F
}
#Suma
sum(dane2$C == 2 & dane2$E == "YES" & dane2$F ==2)/sum(dane2$E == "YES" & dane2$C == 2)
# PrawdopodobieĹ„stwo, ĹĽe pacjent ma chorobÄ™ przewlekĹ‚Ä…, jeĹĽeli kaszle i ma raka pĹ‚uc
#GIT
{
# E C F
#Warunek
warunek <- setEvidence(junction,nodes=c("E","C"),states=c("true","true"))
querygrain(warunek, nodes = c("F"))$F
#Suma
sum(dane2$C == 2 & dane2$E == "YES" & dane2$F ==2)/sum(dane2$E == "YES" & dane2$C == 2)
siec_bayes$F
}
# Zilustrowany rozkladu prawdopodobienstwa dla wybranego wezla E
bn.fit.barchart(bn$E,main="E")
#Suma
sum(dane2$C == 2 & dane2$E == "YES" & dane2$F ==2)/sum(dane2$E == "YES" & dane2$C == 2)
dane <- read.csv(file.choose(), header = TRUE, sep = ",")
dane <- subset(dane, select = c(-1, -2, -3, -4, -6, -8, -9, -10, -11,-14, -15 ))
dane2 <- dane
colnames(dane2) <- c("A", "B", "C", "D", "E" )
# Zmiana formatu danych
#dane2$A <- as.factor(dane2$A) #Gender
#dane2$B <- as.factor(dane2$B) #SMOKING
#dane2$C <- as.factor(dane2$C) #YELLOW_FINGERS
#dane2$E <- as.factor(dane2$E) #PEER_PRESSURE
#dane2$G <- as.factor(dane2$G) #FATIGUE
#dane2$H <- as.factor(dane2$H) #ALLERGY
#dane2$I <- as.factor(dane2$I) #WHEEZING
#dane2$J <- as.factor(dane2$J) #ALCOHOL.CONSUMING
#dane2$M <- as.factor(dane2$M) #SWALLOWING.DIFFICULTY
#dane2$N <- as.factor(dane2$N) #CHEST.PAIN
dane2$A <- as.factor(dane2$A) # Anxiety
dane2$B <- as.factor(dane2$B) #CHRONIC.DISEASE
dane2$C <- as.factor(dane2$C) #COUGHING
dane2$D <- as.factor(dane2$D) #SHORTNESS.OF.BREATH
dane2$E <- as.factor(dane2$E) #LUNG_CANCER
# Stworzenie sieci i jej wykresu
# HC
siecHC <- hc(dane2)
graphviz.plot(siecHC)
score(siecHC,data=dane2,type="bic")
# PCSTABLE
siecPCSTABLE <- pc.stable(dane2)
graphviz.plot(siecPCSTABLE)
siecPCSTABLE <- set.arc(siecPCSTABLE,"A","E")
score(siecPCSTABLE,data=dane2,type="bic")
graphviz.plot(siecPCSTABLE)
# TABU
siecTABU <- tabu(dane2)
graphviz.plot(siecTABU)
score(siecTABU,data=dane2,type="bic")
# ARACNE
siecARACNE <- aracne(dane2)
graphviz.plot(siecARACNE)
# Zdefiniowanie lukow w grafie czesciowo skierowanym
siecARACNE <- set.arc(siecARACNE,"A","C")
siecARACNE <- set.arc(siecARACNE,"B","C")
siecARACNE <- set.arc(siecARACNE,"D","C")
siecARACNE <- set.arc(siecARACNE,"E","C")
graphviz.plot(siecARACNE)
score(siecARACNE,data=dane2,type="bic")
# Definiowanie poziomow wezlow
A.lv <- c("true", "false")
B.lv <- c("true", "false")
C.lv <- c("true", "false")
D.lv <- c("true", "false")
E.lv <- c("true", "false")
# Obliczenie rozkladow prawdopodobienstwa dla kazdej zmiennej
A.praw <- prop.table(table(dane2$A))
B.praw <- prop.table(table(dane2$B))
C.praw <- prop.table(table(dane2$C))
D.praw <- prop.table(table(dane2$D))
E.praw <- prop.table(table(dane2$E))
# Wprowadzenie rozkladow prawdopodobienstwa
A.prob <- array(A.praw, dim = 2, dimnames = list(A=A.lv))
B.prob <- array(B.praw, dim = c(2,2,2), dimnames = list(B=B.lv, C=C.lv, E=E.lv))
C.prob <- array(C.praw, dim = c(2,2), dimnames = list(C=C.lv, A=A.lv))
D.prob <- array(D.praw, dim = c(2,2), dimnames = list(D=D.lv, C=C.lv))
E.prob <- array(E.praw, dim = c(2,2,2), dimnames = list(E=E.lv, A=A.lv, C=C.lv))
cpt <- list(A=A.prob,B=B.prob,C=C.prob,D=D.prob,E=E.prob)
(bn <- custom.fit(siecHC,cpt) )
modelstring(siecHC)
# Narysowanie sieci
plot(siecHC)
# Kolejne zilustrowanie sieci
graphviz.plot(siecHC,layout="dot", shape = "rectangle",
highlight = list(nodes = "B",
col = "tomato", fill = "orange"))
graphviz.chart(bn, type = "barprob", grid = TRUE,
bar.col = "darkgreen", strip.bg = "lightskyblue")
# Sprawdzenie "sily" lukow
arc.strength(siecHC, data = dane2)
# Testy na sprawdzenie hipotezy o zaleznosci zmiennych
ci.test("D","E",test="x2",data=dane2)
#  nie ma wystarczajÄ…cych dowodĂłw, aby odrzuciÄ‡ hipotezÄ™ zerowÄ… o braku zaleznosci miÄ™dzy zmiennymi
ci.test("D","B", "E",test="x2",data=dane2)
#  nie ma wystarczajÄ…cych dowodĂłw, aby odrzuciÄ‡ hipotezÄ™ zerowÄ… o braku zaleznosci miÄ™dzy zmiennymi
dsep(siecHC, x = "D", y = "B", z = "E")
# Zmienne sÄ… warunkowo niezaleĹĽne
# Estymacja parametrow
siec_bayes <- bn.fit(siecHC,dane2)
bn.fit.barchart(siec_bayes$A)
junction <- compile(as.grain(bn))
# Sprawdzenie prawdopodobienstw
# Dla kazdej zmiennej
querygrain(junction, nodes = c("A", "B", "C", "D", "E"), type = "joint")
# PrawdopodobieĹ„stwo, ĹĽe losowy pacjent bÄ™dzie miaĹ‚ lÄ™ki.
# GIT
{
# A
#Suma
A.prob
siec_bayes$A
}
# PrawdopodobieĹ„stwo, ĹĽe pacjent z lÄ™kiem zostanie zdiagnozowany z rakiem pĹ‚uc.
# C D
warunek <- setEvidence(junction,nodes=c("D"),states=c("true"))
querygrain(warunek, nodes = c("E"))$E
# PrawdopodobieĹ„stwo, ĹĽe pacjent z rakiem pĹ‚uc bÄ™dzie miaĹ‚ objawy dusznoĹ›ci.
# E C
warunek <- setEvidence(junction,nodes=c("C"),states=c("true"))
querygrain(warunek, nodes = c("E"))$E
siec_bayes$E
#BLISKO ALE NIE AĹ» TAK I DO TEGO ZĹA KOLUMNA
# Prawdopodobiestwo ze pacjent bedzie mial raka jezeli ma plytki oddech i kaszle
# GIT
{
# D C E
#Warunek
warunek <- setEvidence(junction,nodes=c("D","C"),states=c("true","true"))
querygrain(warunek, nodes = c("E"))$E
#Suma
sum(dane2$C == 2 & dane2$A == 2 & dane2$E =="YES")/sum(dane2$A == 2 & dane2$C == 2)
siec_bayes$E
}
# Zilustrowany rozkladu prawdopodobienstwa dla wybranego wezla E
bn.fit.barchart(bn$E,main="E")
# PrawdopodobieĹ„stwo, ĹĽe pacjent ma chorobÄ™ przewlekĹ‚Ä…, jeĹĽeli kaszle i ma raka pĹ‚uc
#GIT
{
# E C F
#Warunek
warunek <- setEvidence(junction,nodes=c("E","C"),states=c("true","true"))
querygrain(warunek, nodes = c("F"))$F
#Suma
sum(dane2$C == 2 & dane2$E == "YES" & dane2$F ==2)/sum(dane2$E == "YES" & dane2$C == 2)
siec_bayes$F
}
# PrawdopodobieĹ„stwo, ĹĽe pacjent z rakiem pĹ‚uc i lÄ™kami bÄ™dzie miaĹ‚ pĹ‚ytki oddech.
# D C D
warunek <- setEvidence(junction,nodes=c("D","C"),states=c("true","true"))
querygrain(warunek, nodes = c("D"), type="conditional")
querygrain(warunek, nodes = c("D"), type="marginal")
siec_bayes$D
#NAWET KURWA NIE BLISKO
# PrawdopodobieĹ„stwo, ĹĽe pacjent z lÄ™kami, kaszleniem, krĂłtkim oddechem i rakiem bÄ™dzie miaĹ‚ chorobÄ™ przewelekÄ…
# D C D E F
warunek <- setEvidence(junction,nodes=c("D","C","D","E"),states=c("true","true","true","true"))
querygrain(warunek, nodes = c("F"))$F
siec_bayes$F
#NO TAK KURWA ĹšREDNIO
#Suma
sum(dane2$C == 2 & dane2$E == "YES" & dane2$B ==2)/sum(dane2$E == "YES" & dane2$C == 2)
siec_bayes$B
# PrawdopodobieĹ„stwo, ĹĽe pacjent z rakiem pĹ‚uc bÄ™dzie miaĹ‚ objawy dusznoĹ›ci.
# E C
warunek <- setEvidence(junction,nodes=c("C"),states=c("true"))
querygrain(warunek, nodes = c("E"))$E
# PrawdopodobieĹ„stwo, ĹĽe pacjent z rakiem pĹ‚uc i lÄ™kami bÄ™dzie miaĹ‚ pĹ‚ytki oddech.
# D C D
warunek <- setEvidence(junction,nodes=c("D","C"),states=c("true","true"))
querygrain(warunek, nodes = c("D"), type="conditional")
querygrain(warunek, nodes = c("D"), type="marginal")
# PrawdopodobieĹ„stwo, ĹĽe pacjent z rakiem pĹ‚uc i lÄ™kami bÄ™dzie miaĹ‚ pĹ‚ytki oddech.
# D C D
warunek <- setEvidence(junction,nodes=c("A","C"),states=c("true","true"))
querygrain(warunek, nodes = c("D"), type="conditional")
querygrain(warunek, nodes = c("D"), type="marginal")
warunek <- setEvidence(junction,nodes=c("D","C","D","E"),states=c("true","true","true","true"))
querygrain(warunek, nodes = c("F"))$F
warunek <- setEvidence(junction,nodes=c("A","C","D","E"),states=c("true","true","true","true"))
querygrain(warunek, nodes = c("F"))$F
warunek <- setEvidence(junction,nodes=c("A","B","C","D"),states=c("true","true","true","true"))
querygrain(warunek, nodes = c("F"))$F
warunek <- setEvidence(junction,nodes=c("A","C","D","E"),states=c("true","true","true","true"))
querygrain(warunek, nodes = c("B"))$F
warunek <- setEvidence(junction,nodes=c("A","C","D","E"),states=c("true","true","true","true"))
querygrain(warunek, nodes = c("B"))$B
dane <- read.csv("E:/STUDIA/SEMESTR VI/Wielowymiarowa analiza danych/Projekt/Accidents.csv")
dane <- read.csv("E:/STUDIA/SEMESTR VI/Wielowymiarowa analiza danych/Projekt/Accidents.csv")
table(dane$State)
# Zliczanie wystąpień wartości w kolumnie "State"
licznik <- table(dane$State)
# Wyświetlenie wyników
print(licznik)
# Zliczanie wystąpień wartości w kolumnie "State"
licznik <- table(dane$State)
# Wyświetlenie wyników
print(licznik)
# Zliczanie wystąpień wartości w kolumnie "State" i sumowanie liczby kolumn
liczba_kolumn <- sum(table(dane$State))
# Wyświetlenie liczby kolumn
print(liczba_kolumn)
licznik <- table(distinc(dane$State))
table(unique(dane$State))
sum(table(unique(dane$State)))
plot(godz_moc_PV)
setwd("E:/STUDIA/SEMESTR VI/Inżynierski projekt dyplomowy")
# Pobieranie bieżącego katalogu roboczego
getwd()
# Wczytywanie danych
godz_moc_PV <- head(read.csv("Timeseries.csv", header = TRUE, sep = ",", skip = 10), -7)
# Usuwanie niepotrzebnych kolumn
godz_moc_PV <- godz_moc_PV[,-3:-7]
# Wczytywanie pakietow dplyr i tidyr
library(dplyr)
library(tidyr)
# Rozdzielenie kolumny 'time' na 'Data' i 'Godzina'
godz_moc_PV <-  separate(godz_moc_PV, time, c('Data', 'Godzina'))
# Zmiana nazw kolumn
colnames(godz_moc_PV)[3] = "Moc"
# Formatowanie daty
library(lubridate)
godz_moc_PV$Data <- ymd(godz_moc_PV$Data)
# Formatowanie godziny
godz_moc_PV$Godzina <- substr(godz_moc_PV$Godzina, start = 1, stop = 2)
godz_moc_PV$Godzina <- sprintf("%02d", as.numeric(godz_moc_PV$Godzina))
godz_moc_PV$Godzina[godz_moc_PV$Godzina == "00"] <- "24"
# Konwersja typow danych kolumn i przeliczanie Mocy z W na kW
#godz_moc_PV$Godzina <- as.integer(godz_moc_PV$Godzina)
godz_moc_PV$Moc <- as.double(godz_moc_PV$Moc) / 1000
# Analiza roku sredniego, najgorszego i najlepszego
godz_moc_PV <- godz_moc_PV %>% mutate(Rok = year(Data))
podsumowanie_roczne <- godz_moc_PV %>%
group_by(Rok) %>%
summarize(CalkowitaMoc = sum(Moc, na.rm = TRUE))
rok_sredni <- mean(podsumowanie_roczne$CalkowitaMoc)
rok_najgorszy <- min(podsumowanie_roczne$CalkowitaMoc)
rok_najlepszy <- max(podsumowanie_roczne$CalkowitaMoc)
dane_najgorszego_roku <- filter(podsumowanie_roczne, CalkowitaMoc == rok_najgorszy)
dane_najlepszego_roku <- filter(podsumowanie_roczne, CalkowitaMoc == rok_najlepszy)
cat("Rok średni:", rok_sredni, "kW mocy\n")
cat("Najgorszy rok to", dane_najgorszego_roku$Rok, "z", rok_najgorszy, "kW mocy\n")
cat("Najlepszy rok to", dane_najlepszego_roku$Rok, "z", rok_najlepszy, "kW mocy\n")
str(godz_moc_PV)
plot(godz_moc_PV)
roczne_zuzycie <- 2300
dni_w_roku <- 365
srednie_dzienne_zuzycie <- roczne_zuzycie / dni_w_roku
# Tworzymy sekwencje dat na podstawie roku
data_poczatkowa <- as.Date("2018-01-01")
data_koncowa <- as.Date("2022-12-31")
daty <- seq(data_poczatkowa, data_koncowa, by = "days")
# Tworzymy pusta ramke danych z datami i godzinami
godzinowe_dane_zuzycia <- expand.grid(Data = daty, Godzina = sprintf("%02d", c(24, 1:23)))
# Funkcja generujaca godzinowe zuzycie energii dla każdego dnia
generuj_godzinowe_zuzycie <- function(dzienne_zuzycie) {
godzinowy_rozklad <- runif(24, min = 0, max = 1)
godzinowe_zuzycie <- dzienne_zuzycie * godzinowy_rozklad / sum(godzinowy_rozklad)
return(godzinowe_zuzycie)
}
# Wypelniamy ramke danych godzinowym zuzyciem energii
godzinowe_dane_zuzycia$Zuzycie <- c()
for (data in unique(godzinowe_dane_zuzycia$Data)) {
dzienne_zuzycie <- runif(1, min = 4, max = 8)
godzinowe_zuzycie <- generuj_godzinowe_zuzycie(dzienne_zuzycie)
# Wybieramy wiersze dla konkretnego dnia i przypisujemy wartosci godzinowego zuzycia energii
godzinowe_dane_zuzycia$Zuzycie[godzinowe_dane_zuzycia$Data == data] <- godzinowe_zuzycie
}
# Sortujemy ramke danych wedlug daty i godziny
godzinowe_dane_zuzycia <- godzinowe_dane_zuzycia[order(godzinowe_dane_zuzycia$Data, godzinowe_dane_zuzycia$Godzina), ]
# Resetujemy indeks wierszy
rownames(godzinowe_dane_zuzycia) <- seq_len(nrow(godzinowe_dane_zuzycia))
# Ladujemy potrzebne biblioteki
library(dplyr)
library(lubridate)
# Grupujemy dane wedlug dnia i obliczamy dziennie zuzycie energii
dzienna_dane <- godzinowe_dane_zuzycia %>%
group_by(Data) %>%
summarise(DzienneZuzycie = sum(Zuzycie))
# Dodajemy kolumnę z rokiem
godzinowe_dane_zuzycia$Rok <- year(godzinowe_dane_zuzycia$Data)
# Grupujemy dane według roku i miesiąca, a następnie obliczamy miesięczne zużycie energii
miesieczne_dane <- godzinowe_dane_zuzycia %>%
mutate(Miesiac = month(Data)) %>%
group_by(Rok, Miesiac) %>%
summarise(MiesieczneZuzycie = sum(Zuzycie))
# Grupujemy dane wedlug roku i obliczamy roczne zuzycie energii
roczne_zuzycie <- godzinowe_dane_zuzycia %>%
mutate(Rok = year(Data)) %>%
group_by(Rok) %>%
summarise(RoczneZuzycie = sum(Zuzycie))
# Sprawdzamy wyniki
head(godzinowe_dane_zuzycia)
head(dzienna_dane)
head(miesieczne_dane)
head(roczne_zuzycie)
godzinowe_dane_zuzycia$Godzina <- as.character(godzinowe_dane_zuzycia$Godzina)
str(godzinowe_dane_zuzycia)
plot(godzinowe_dane_zuzycia$Rok, godzinowe_dane_zuzycia$Zuzycie)
